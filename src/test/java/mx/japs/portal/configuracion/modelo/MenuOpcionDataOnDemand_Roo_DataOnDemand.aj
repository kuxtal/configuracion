// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mx.japs.portal.configuracion.modelo;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import mx.japs.portal.configuracion.modelo.MenuOpcion;
import mx.japs.portal.configuracion.modelo.MenuOpcionDataOnDemand;
import mx.japs.portal.configuracion.modelo.ModuloDataOnDemand;
import mx.japs.portal.configuracion.repositorio.MenuOpcionRepository;
import mx.japs.portal.configuracion.servicio.MenuOpcionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MenuOpcionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MenuOpcionDataOnDemand: @Component;
    
    private Random MenuOpcionDataOnDemand.rnd = new SecureRandom();
    
    private List<MenuOpcion> MenuOpcionDataOnDemand.data;
    
    @Autowired
    ModuloDataOnDemand MenuOpcionDataOnDemand.moduloDataOnDemand;
    
    @Autowired
    MenuOpcionService MenuOpcionDataOnDemand.menuOpcionService;
    
    @Autowired
    MenuOpcionRepository MenuOpcionDataOnDemand.menuOpcionRepository;
    
    public MenuOpcion MenuOpcionDataOnDemand.getNewTransientMenuOpcion(int index) {
        MenuOpcion obj = new MenuOpcion();
        setNombre(obj, index);
        setOpcionPadre(obj, index);
        setTexto(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void MenuOpcionDataOnDemand.setNombre(MenuOpcion obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public void MenuOpcionDataOnDemand.setOpcionPadre(MenuOpcion obj, int index) {
        MenuOpcion opcionPadre = obj;
        obj.setOpcionPadre(opcionPadre);
    }
    
    public void MenuOpcionDataOnDemand.setTexto(MenuOpcion obj, int index) {
        String texto = "texto_" + index;
        obj.setTexto(texto);
    }
    
    public void MenuOpcionDataOnDemand.setUrl(MenuOpcion obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public MenuOpcion MenuOpcionDataOnDemand.getSpecificMenuOpcion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MenuOpcion obj = data.get(index);
        Long id = obj.getId();
        return menuOpcionService.findMenuOpcion(id);
    }
    
    public MenuOpcion MenuOpcionDataOnDemand.getRandomMenuOpcion() {
        init();
        MenuOpcion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return menuOpcionService.findMenuOpcion(id);
    }
    
    public boolean MenuOpcionDataOnDemand.modifyMenuOpcion(MenuOpcion obj) {
        return false;
    }
    
    public void MenuOpcionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = menuOpcionService.findMenuOpcionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MenuOpcion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MenuOpcion>();
        for (int i = 0; i < 10; i++) {
            MenuOpcion obj = getNewTransientMenuOpcion(i);
            try {
                menuOpcionService.saveMenuOpcion(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            menuOpcionRepository.flush();
            data.add(obj);
        }
    }
    
}
